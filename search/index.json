[{"content":"在 php 中， $this 和 $self 都与面向对象编程有关，但是它们的用途和上下文完全不同\n$this 作用： $this 是一个指向当前对象实例的引用（类的实例化对象） 使用场景： 在类的实例方法中访问当前对象的属性和方法 注意点：\n只能在实例方法中使用（静态方法中不可用） 用于区分局部变量和对象属性（例如 $this-\u0026gt;property $property) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class User { private string $name; public function __construct(string $name) { $this-\u0026gt;name = $name; } public function getName(): string { return $this-\u0026gt;name; } } $user = new User(\u0026#39;zs\u0026#39;); $userName = $user-\u0026gt;getName(); self 作用： $self 是一个指向当前类本身的引用（而非实例） 使用场景：\n在类的静态方法或实例方法中访问静态成员（静态属性或静态方法） 用于在类内部调用自身的静态方法或访问静态属性，避免因为继续导致的意外行为（类似 static 但 self 严格指向定义时的类） 注意点：\n可以用于静态和非静态方法中 访问静态成员时需用 :: 操作符（例如 self::$staticProperty) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Counter { private static int $count = 0; public static function getCount(): int { return self::$count; } public function increment(): void { self::$count++; } } $count1 = Counter::getCount(); // 0 $counter1 = new Counter(); $counter1-\u0026gt;increment(); $count2 = Counter::getCount(); // 1 扩展阅读 self vs static self 严格指向定义方法的类，适合不需要继承动态性的场景 static 动态绑定到实际调用的类，适合需要支持多态和继承的场景\nself 例子 self 始终指向定义方法的类，即使在子类中调用也不会改变\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class ParentClass { public static function who(): void { echo \u0026#34;ParentClass\\n\u0026#34;; } public function callWho(): void { self::who(); // 始终调用 ParentClass::who() } } class ChildClass extends ParentClass { public static function who(): void { echo \u0026#34;ChildClass\\n\u0026#34;; } } $obj = new ChildClass(); $obj-\u0026gt;callWho(); // 输出 \u0026#34;ParentClass\u0026#34;（因为 self 指向 ParentClass） static 例子 static 支持后期静态绑定，会指向实际调用的类\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class ParentClass { public static function who(): void { echo \u0026#34;ParentClass\\n\u0026#34;; } public function callWho(): void { static::who(); // 动态绑定到实际调用的类 } } class ChildClass extends ParentClass { public static function who(): void { echo \u0026#34;ChildClass\\n\u0026#34;; } } $obj = new ChildClass(); $obj-\u0026gt;callWho(); // 输出 \u0026#34;ChildClass\u0026#34;（因为 static 动态绑定到 ChildClass） 更复杂的继承场景 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class Grandparent { public static function who() { echo \u0026#34;Grandparent\\n\u0026#34;; } } class ParentClass extends Grandparent { public static function who(): void { echo \u0026#34;Parent\\n\u0026#34;; } public function callWhoWithSelf(): void { self::who(); // 始终调用 Parent::who() } public function callWhoWithStatic(): void { static::who(); // 动态绑定到实际调用的类 } } class Child extends ParentClass { public static function who(): void { echo \u0026#34;Child\\n\u0026#34;; } } $child = new Child(); $child-\u0026gt;callWhoWithSelf(); // 输出 \u0026#34;Parent\u0026#34;（self 绑定到 Parent） $child-\u0026gt;callWhoWithStatic(); // 输出 \u0026#34;Child\u0026#34;（static 动态绑定到 Child） 实际应用场景 self - 单例模式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Singleton { private static ?Singleton $instance = null; private function __construct() { } public static function getInstance(): Singleton { if (self::$instance === null) { self::$instance = new self(); // 固定创建 Singleton 实例 } return self::$instance; } } $s1 = Singleton::getInstance(); $s2 = Singleton::getInstance(); static - 工厂模式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 abstract class Logger { /** * Title: 写日志 */ public static function log($message): void { static::writeToLog($message); // 动态调用子类的实现 } /** * Title: 具体写日志的抽象方法 */ protected abstract static function writeToLog($message); } class FileLogger extends Logger { /** * Title: 写文件日志方法 */ protected static function writeToLog($message): void { file_put_contents(\u0026#39;log.txt\u0026#39;, $message, FILE_APPEND); } } Logger::log(\u0026#34;Hello\u0026#34;); // 实际调用 FileLogger::writeToLog() ","date":"2025-05-12T21:12:58+08:00","image":"https://highcoldboy.github.io/p/php-this-self/cover_hu_6096b98daabe5f45.png","permalink":"https://highcoldboy.github.io/p/php-this-self/","title":"php 类中 this 和 self 的区别"},{"content":"箭头函数 1 2 3 4 5 6 7 8 9 10 11 12 $prefix = \u0026#39;海贼王\u0026#39;; $users = [ [\u0026#39;name\u0026#39; =\u0026gt; \u0026#39;路飞\u0026#39;, \u0026#39;email\u0026#39; =\u0026gt; \u0026#39;lf@hzw.com\u0026#39;], [\u0026#39;name\u0026#39; =\u0026gt; \u0026#39;娜美\u0026#39;, \u0026#39;email\u0026#39; =\u0026gt; \u0026#39;nm@hhzw.com\u0026#39;], [\u0026#39;name\u0026#39; =\u0026gt; \u0026#39;汉库克\u0026#39;, \u0026#39;email\u0026#39; =\u0026gt; \u0026#39;hkk@hzw.com\u0026#39;], ]; $newUsers1 = array_map(function ($user) use ($prefix) { return $prefix . \u0026#39;-\u0026#39; . $user[\u0026#39;name\u0026#39;]; }, $users); $newUsers2 = array_map(fn($user) =\u0026gt; $prefix . \u0026#39;-\u0026#39; . $user[\u0026#39;name\u0026#39;], $users); 注意：PHP7.4+才能支持\n\u0026hellip;解构赋值 1 2 3 4 5 6 7 8 9 10 11 $users = [ [\u0026#39;name\u0026#39; =\u0026gt; \u0026#39;路飞\u0026#39;, \u0026#39;email\u0026#39; =\u0026gt; \u0026#39;lf@hzw.com\u0026#39;], [\u0026#39;name\u0026#39; =\u0026gt; \u0026#39;娜美\u0026#39;, \u0026#39;email\u0026#39; =\u0026gt; \u0026#39;nm@hhzw.com\u0026#39;], [\u0026#39;name\u0026#39; =\u0026gt; \u0026#39;汉库克\u0026#39;, \u0026#39;email\u0026#39; =\u0026gt; \u0026#39;hkk@hzw.com\u0026#39;], ]; ## list($first, $second) = $users; [$first, $second] = $users; $info = [\u0026#39;name\u0026#39; =\u0026gt; \u0026#39;路飞\u0026#39;, \u0026#39;email\u0026#39; =\u0026gt; \u0026#39;lf@hzw.com\u0026#39;, \u0026#39;sex\u0026#39; =\u0026gt; \u0026#39;male\u0026#39;, \u0026#39;age\u0026#39; =\u0026gt; 123]; [\u0026#39;name\u0026#39; =\u0026gt; $name, \u0026#39;email\u0026#39; =\u0026gt; $email] = $info; match 表达式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 switch ($code) { case 200: $msg2 = \u0026#39;成功\u0026#39;; break; case 404: $msg2 = \u0026#39;没找到\u0026#39;; break; case 401: $msg2 = \u0026#39;没权限\u0026#39;; break; default: $msg2 = \u0026#39;未知\u0026#39;; } ## 比较时也会比较数据类型 $msg3 = match ($code) { 200 =\u0026gt; \u0026#39;成功\u0026#39;, 404 =\u0026gt; \u0026#39;没找到\u0026#39;, 401 =\u0026gt; \u0026#39;没权限\u0026#39;, default =\u0026gt; \u0026#39;未知\u0026#39;, }; $statusCode = [200 =\u0026gt; \u0026#39;成功\u0026#39;, \u0026#39;404\u0026#39; =\u0026gt; \u0026#39;没找到\u0026#39;, 401 =\u0026gt; \u0026#39;没权限\u0026#39;]; $msg1 = $statusCode[$code] ?? \u0026#39;未知\u0026#39;; 注意：PHP8.0+才能支持\nnullsafe运算符 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class User { private string $name; private string $gender; public function __construct(string $name, string $gender) { $this-\u0026gt;name = $name; $this-\u0026gt;gender = $gender; } public function getInfo(): string { return $this-\u0026gt;name . \u0026#39; \u0026#39; . $this-\u0026gt;gender; } } class Work { private User $user; public function __construct(User $user) { $this-\u0026gt;user = $user; } public function getUser(): User { return $this-\u0026gt;user; } } $user = new User(\u0026#39;zs\u0026#39;, \u0026#39;male\u0026#39;); $work = (new Work($user)); $userInfo = $work?-\u0026gt;getUser()?-\u0026gt;getInfo(); 注意：PHP8.0+才能支持\n数组解构搭配 list 1 2 3 4 5 6 7 8 9 $users = [ [\u0026#39;name\u0026#39; =\u0026gt; \u0026#39;路飞\u0026#39;, \u0026#39;email\u0026#39; =\u0026gt; \u0026#39;lf@hzw.com\u0026#39;], [\u0026#39;name\u0026#39; =\u0026gt; \u0026#39;娜美\u0026#39;, \u0026#39;email\u0026#39; =\u0026gt; \u0026#39;nm@hhzw.com\u0026#39;], [\u0026#39;name\u0026#39; =\u0026gt; \u0026#39;汉库克\u0026#39;, \u0026#39;email\u0026#39; =\u0026gt; \u0026#39;hkk@hzw.com\u0026#39;], ]; foreach ($users as [\u0026#39;name\u0026#39; =\u0026gt; $name, \u0026#39;email\u0026#39; =\u0026gt; $email]) { echo $name, \u0026#39;-\u0026#39;, $email, \u0026#39;\u0026lt;br/\u0026gt;\u0026#39;; } 注意：PHP7.1+才能支持\nusort 搭配太空船操作符 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 $users = [ [\u0026#39;name\u0026#39; =\u0026gt; \u0026#39;路飞\u0026#39;, \u0026#39;email\u0026#39; =\u0026gt; \u0026#39;lf@hzw.com\u0026#39;, \u0026#39;age\u0026#39; =\u0026gt; 111], [\u0026#39;name\u0026#39; =\u0026gt; \u0026#39;娜美\u0026#39;, \u0026#39;email\u0026#39; =\u0026gt; \u0026#39;nm@hhzw.com\u0026#39;, \u0026#39;age\u0026#39; =\u0026gt; 44], [\u0026#39;name\u0026#39; =\u0026gt; \u0026#39;汉库克\u0026#39;, \u0026#39;email\u0026#39; =\u0026gt; \u0026#39;hkk@hzw.com\u0026#39;, \u0026#39;age\u0026#39; =\u0026gt; 78], ]; ## 根据年龄从小到大 // usort($users, function ($a, $b) { // if ($a[\u0026#39;age\u0026#39;] == $b[\u0026#39;age\u0026#39;]) return 0; // return ($a[\u0026#39;age\u0026#39;] \u0026gt; $b[\u0026#39;age\u0026#39;]) ? 1 : -1; // }); usort($users, function ($a, $b) { return $a[\u0026#39;age\u0026#39;] \u0026lt;=\u0026gt; $b[\u0026#39;age\u0026#39;]; }); ","date":"2025-05-11T18:11:07+08:00","image":"https://highcoldboy.github.io/p/php-syntactic-sugar/cover_hu_3b66170062bf06d3.png","permalink":"https://highcoldboy.github.io/p/php-syntactic-sugar/","title":"php 语法糖"}]